<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/11/06/node_modules/hexo-asset-img/README_zh/"/>
      <url>/2024/11/06/node_modules/hexo-asset-img/README_zh/</url>
      
        <content type="html"><![CDATA[<p align="center"><!-- <img src="docs/.vuepress/public/images/logo.png" alt="hexo-asset-img"> --></p><h1 align="center">hexo-asset-img</h1><p><a href="README.md">English</a> | 中文</p><blockquote><p>:cake: Hexo 本地图片插件: 转换 图片相对路径 为 asset_img</p></blockquote><p><a href=""><img src="https://img.shields.io/github/repo-size/yiyungent/hexo-asset-img.svg?style=flat" alt="repo size"></a><br><a href="https://github.com/yiyungent/hexo-asset-img/blob/master/LICENSE"><img src="https://img.shields.io/github/license/yiyungent/hexo-asset-img.svg?style=flat" alt="LICENSE"></a><br><a href="https://www.npmjs.com/package/hexo-asset-img"><img src="https://img.shields.io/npm/v/hexo-asset-img.svg" alt="NPM version"></a><br><a href="https://www.npmjs.com/package/hexo-asset-img"><img src="https://img.shields.io/npm/dt/hexo-asset-img" alt="NPM downloads"></a><br><a href="https://jq.qq.com/?_wv=1027&k=q5R82fYN"><img src="https://img.shields.io/badge/QQ%20Group-894031109-deepgreen" alt="QQ Group"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>使用本插件 即可实现 Typora 等 Markdown 编辑器预览 与 Hexo 发布预览 均能正常显示图片</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><blockquote><p>最新开发版</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install git://github.com/yiyungent/hexo-asset-img.git#main</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo-typora</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.png</span><br><span class="line">└── rules.jpg</span><br><span class="line">hexo-typora.md</span><br></pre></td></tr></table></figure><p>Make sure <code>post_asset_folder: true</code> in your <code>_config.yml</code>.</p><p><code>hexo-typora.md</code>: Just use <code>![logo](hexo-typora/logo.png)</code> to insert <code>logo.png</code>.</p><h3 id="与-Typora-配合使用"><a href="#与-Typora-配合使用" class="headerlink" title="与 Typora 配合使用"></a>与 Typora 配合使用</h3><ul><li><a href="https://moeci.com/posts/hexo-typora">Hexo + Typora + 开发Hexo插件 解决图片路径不一致 | yiyun’s Blog</a></li></ul><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p><a href="https://github.com/xcodebuild/hexo-asset-image">hexo-asset-image</a> 已无效, 大概是从 <code>Hexo 5</code> 开始，并且此仓库已 archived </p><blockquote><p>Q: 为什么使用本地图片 而不是网络图片 (图床) ?<br>A:</p><ol><li>第三方图床不稳定, 容易丢失图片    </li><li>自行搭建图床, 随着上传错误图片, 删除文章而没有删除关联图片 次数的增多, 未引用图片越来越多, 图床中也越来越多的无用冗余图片, 还不方便删除, 也容易误删除     </li><li>本地图片 与 文章在一个文件夹, 易打包, 在无网络或网络较差时也能预览   </li><li>本地图片 放在与 文章文件名同名文件夹内 方便管理</li></ol><p><code>补充:</code><br>很多 <code>markdown编辑器</code> 提供粘贴图片到本地图片文件夹, 这些图片文件名通常不易读, 较长, 如果每次删除文章中的图片引用, 都手动去删除相应图片, 以及删除文章, 手动删除关联图片文件夹, 比较麻烦, 但不删除, 未引用图片又会越来越多, 因此 <code>删除未引用图片工具</code> 应运而生!      </p><ul><li><a href="https://github.com/yiyungent/clear-image-action">yiyungent&#x2F;clear-image-action: 🔧 Image detection. | 图片检测 | 清理未引用图片 | 删除未引用图片 | 检查引用的图片是否有效 | GitHub Actions</a></li><li><a href="https://github.com/yiyungent/coo">yiyungent&#x2F;coo: 🧰 .NET 自用CLI, 工具集</a></li></ul></blockquote><h2 id="相关项目"><a href="#相关项目" class="headerlink" title="相关项目"></a>相关项目</h2><ul><li><a href="https://github.com/yiyungent/clear-image-action">yiyungent&#x2F;clear-image-action: 🔧 Image detection. | 图片检测 | 清理未引用图片 | 删除未引用图片 | 检查引用的图片是否有效 | GitHub Actions</a></li><li><a href="https://github.com/xcodebuild/hexo-asset-image">xcodebuild&#x2F;hexo-asset-image</a></li><li><a href="https://github.com/cocowool/hexo-image-link">cocowool&#x2F;hexo-image-link</a></li><li><a href="https://github.com/cnzsb/hexo-asset">cnzsb&#x2F;hexo-asset</a></li></ul><h2 id="Donate"><a href="#Donate" class="headerlink" title="Donate"></a>Donate</h2><p>hexo-asset-img is an MIT licensed open source project and completely free to use. However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing.</p><p>We accept donations through these channels:</p><ul><li><a href="https://afdian.net/@yiyun" target="_blank">爱发电</a></li></ul><h2 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h2><p><strong>hexo-asset-img</strong> © <a href="https://github.com/yiyungent">yiyun</a>, Released under the <a href="./LICENSE">MIT</a> License.<br><br>Authored and maintained by yiyun with help from contributors (<a href="https://github.com/yiyungent/hexo-asset-img/contributors">list</a>).</p><blockquote><p>GitHub <a href="https://github.com/yiyungent">@yiyungent</a> Gitee <a href="https://gitee.com/yiyungent">@yiyungent</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/06/node_modules/hexo-asset-img/README/"/>
      <url>/2024/11/06/node_modules/hexo-asset-img/README/</url>
      
        <content type="html"><![CDATA[<p align="center"><!-- <img src="docs/.vuepress/public/images/logo.png" alt="hexo-asset-img"> --></p><h1 align="center">hexo-asset-img</h1><p>English | <a href="README_zh.md">中文</a></p><blockquote><p>:cake: Hexo local image plugin: Convert the relative path of the image to asset_img</p></blockquote><p><a href=""><img src="https://img.shields.io/github/repo-size/yiyungent/hexo-asset-img.svg?style=flat" alt="repo size"></a><br><a href="https://github.com/yiyungent/hexo-asset-img/blob/master/LICENSE"><img src="https://img.shields.io/github/license/yiyungent/hexo-asset-img.svg?style=flat" alt="LICENSE"></a><br><a href="https://www.npmjs.com/package/hexo-asset-img"><img src="https://img.shields.io/npm/v/hexo-asset-img.svg" alt="NPM version"></a><br><a href="https://www.npmjs.com/package/hexo-asset-img"><img src="https://img.shields.io/npm/dt/hexo-asset-img" alt="NPM downloads"></a><br><a href="https://jq.qq.com/?_wv=1027&k=q5R82fYN"><img src="https://img.shields.io/badge/QQ%20Group-894031109-deepgreen" alt="QQ Group"></a></p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Use this plug-in to realize the preview of Markdown editors such as Typora and Hexo release preview, both of which can display pictures normally</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><blockquote><p>Latest Dev</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install git://github.com/yiyungent/hexo-asset-img.git#main</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo-typora</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.png</span><br><span class="line">└── rules.jpg</span><br><span class="line">hexo-typora.md</span><br></pre></td></tr></table></figure><p>Make sure <code>post_asset_folder: true</code> in your <code>_config.yml</code>.</p><p><code>hexo-typora.md</code>: Just use <code>![logo](hexo-typora/logo.png)</code> to insert <code>logo.png</code>.</p><h3 id="Use-with-Typora"><a href="#Use-with-Typora" class="headerlink" title="Use with Typora"></a>Use with Typora</h3><ul><li><a href="https://moeci.com/posts/hexo-typora">Hexo + Typora + Hexo plug-in development to solve the inconsistency of image paths | yiyun’s Blog</a></li></ul><h2 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h2><p><a href="https://github.com/xcodebuild/hexo-asset-image">hexo-asset-image</a> No longer valid, probably starting from <code>Hexo 5</code>, and this repository has been archived </p><blockquote><p>Q: 为什么使用本地图片 而不是网络图片 (图床) ?<br>A:</p><ol><li>第三方图床不稳定, 容易丢失图片    </li><li>自行搭建图床, 随着上传错误图片, 删除文章而没有删除关联图片 次数的增多, 未引用图片越来越多, 图床中也越来越多的无用冗余图片, 还不方便删除, 也容易误删除     </li><li>本地图片 与 文章在一个文件夹, 易打包, 在无网络或网络较差时也能预览   </li><li>本地图片 放在与 文章文件名同名文件夹内 方便管理</li></ol><p><code>补充:</code><br>很多 <code>markdown编辑器</code> 提供粘贴图片到本地图片文件夹, 这些图片文件名通常不易读, 较长, 如果每次删除文章中的图片引用, 都手动去删除相应图片, 以及删除文章, 手动删除关联图片文件夹, 比较麻烦, 但不删除, 未引用图片又会越来越多, 因此 <code>删除未引用图片工具</code> 应运而生!      </p><ul><li><a href="https://github.com/yiyungent/clear-image-action">yiyungent&#x2F;clear-image-action: 🔧 Image detection. | 图片检测 | 清理未引用图片 | 删除未引用图片 | 检查引用的图片是否有效 | GitHub Actions</a></li><li><a href="https://github.com/yiyungent/coo">yiyungent&#x2F;coo: 🧰 .NET 自用CLI, 工具集</a></li></ul></blockquote><h2 id="Related-Projects"><a href="#Related-Projects" class="headerlink" title="Related Projects"></a>Related Projects</h2><ul><li><a href="https://github.com/yiyungent/clear-image-action">yiyungent&#x2F;clear-image-action: 🔧 Image detection. | 图片检测 | 清理未引用图片 | 删除未引用图片 | 检查引用的图片是否有效 | GitHub Actions</a></li><li><a href="https://github.com/xcodebuild/hexo-asset-image">xcodebuild&#x2F;hexo-asset-image</a></li><li><a href="https://github.com/cocowool/hexo-image-link">cocowool&#x2F;hexo-image-link</a></li><li><a href="https://github.com/cnzsb/hexo-asset">cnzsb&#x2F;hexo-asset</a></li></ul><h2 id="Donate"><a href="#Donate" class="headerlink" title="Donate"></a>Donate</h2><p>hexo-asset-img is an MIT licensed open source project and completely free to use. However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing.</p><p>We accept donations through these channels:</p><ul><li><a href="https://afdian.net/@yiyun" target="_blank">爱发电</a></li></ul><h2 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h2><p><strong>hexo-asset-img</strong> © <a href="https://github.com/yiyungent">yiyun</a>, Released under the <a href="./LICENSE">MIT</a> License.<br><br>Authored and maintained by yiyun with help from contributors (<a href="https://github.com/yiyungent/hexo-asset-img/contributors">list</a>).</p><blockquote><p>GitHub <a href="https://github.com/yiyungent">@yiyungent</a> Gitee <a href="https://gitee.com/yiyungent">@yiyungent</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>指令系统</title>
      <link href="/2024/11/06/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/11/06/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成与系统结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统结构</title>
      <link href="/2024/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
      <url>/2024/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h1><h2 id="指令集架构"><a href="#指令集架构" class="headerlink" title="指令集架构"></a>指令集架构</h2><h2 id="微体系架构"><a href="#微体系架构" class="headerlink" title="微体系架构"></a>微体系架构</h2><h2 id="数据表达"><a href="#数据表达" class="headerlink" title="数据表达"></a>数据表达</h2><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><h2 id="寄存器定义"><a href="#寄存器定义" class="headerlink" title="寄存器定义"></a>寄存器定义</h2><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><p>​<img src="C:\Users\czh\AppData\Roaming\Typora\typora-user-images\image-20241106160537615.png" alt="image-20241106160537615"></p><p>​<img src="C:\Users\czh\AppData\Roaming\Typora\typora-user-images\image-20241106160557265.png" alt="image-20241106160557265"></p><p>​<img src="C:\Users\czh\AppData\Roaming\Typora\typora-user-images\image-20241106160618550.png" alt="image-20241106160618550"></p><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h2 id="机器工作状态"><a href="#机器工作状态" class="headerlink" title="机器工作状态"></a>机器工作状态</h2><h2 id="输入输出结构"><a href="#输入输出结构" class="headerlink" title="输入输出结构"></a>输入输出结构</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成与系统结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C艹基础（1）</title>
      <link href="/2024/11/05/C-%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/11/05/C-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="信息系统开发（-NET）-第八章作业"><a href="#信息系统开发（-NET）-第八章作业" class="headerlink" title="信息系统开发（.NET）   第八章作业"></a>信息系统开发（.NET）   第八章作业</h1><h2 id="什么是类的继承？怎么定义派生类？"><a href="#什么是类的继承？怎么定义派生类？" class="headerlink" title="什么是类的继承？怎么定义派生类？"></a>什么是类的继承？怎么定义派生类？</h2><h2 id="简述创建派生类时，构造函数的调用。"><a href="#简述创建派生类时，构造函数的调用。" class="headerlink" title="简述创建派生类时，构造函数的调用。"></a>简述创建派生类时，构造函数的调用。</h2><h2 id="怎样定义基类虚方法，并在派生类中重写基类虚方法？"><a href="#怎样定义基类虚方法，并在派生类中重写基类虚方法？" class="headerlink" title="怎样定义基类虚方法，并在派生类中重写基类虚方法？"></a>怎样定义基类虚方法，并在派生类中重写基类虚方法？</h2><h2 id="抽象方法和虚方法有什么异同？"><a href="#抽象方法和虚方法有什么异同？" class="headerlink" title="抽象方法和虚方法有什么异同？"></a>抽象方法和虚方法有什么异同？</h2><h2 id="什么是抽象类？它有什么特点？它和接口有何异同？"><a href="#什么是抽象类？它有什么特点？它和接口有何异同？" class="headerlink" title="什么是抽象类？它有什么特点？它和接口有何异同？"></a>什么是抽象类？它有什么特点？它和接口有何异同？</h2><h2 id="简述通过委托来调用对象方法的基本过程。"><a href="#简述通过委托来调用对象方法的基本过程。" class="headerlink" title="简述通过委托来调用对象方法的基本过程。"></a>简述通过委托来调用对象方法的基本过程。</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算器原理</title>
      <link href="/2024/11/05/c-%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2024/11/05/c-%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="计算器原理"><a href="#计算器原理" class="headerlink" title="计算器原理"></a>计算器原理</h1><p>计算器计算的表达式是后缀表达式。</p><p>我们输入一个表达式，计算器给出结果主要经过了：将中缀表达式转化为后缀表达式，计算后缀表达式这两个过程</p><p>而转化和计算过程运用到了数据结构“栈”。</p><p>我们为了简化过程，在转化后缀表达式过程中进行中间结果的计算。</p><h3 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95">中缀表示法 - 维基百科，自由的百科全书</a></p></blockquote><p>中缀表达法是自然语言的写法，其操作符在操作数的中间</p><p>如3+4</p><h3 id="后缀表达式（逆波兰表示法）"><a href="#后缀表达式（逆波兰表示法）" class="headerlink" title="后缀表达式（逆波兰表示法）"></a>后缀表达式（逆波兰表示法）</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95">逆波兰表示法 - 维基百科，自由的百科全书</a></p></blockquote><p>即所有操作符在操作数的后面。</p><h5 id="求值过程"><a href="#求值过程" class="headerlink" title="求值过程"></a>求值过程</h5><ol><li>从左到右扫描表达式</li><li>遇到数字时，将数字压入堆栈</li><li>遇到运算符时<ul><li>弹出栈顶的两个数（栈顶和次顶），用运算符对它们做对应的计算，并将结果入栈</li><li>计算顺序是： 后弹出来的  （运算符）  先弹出来的</li></ul></li></ol><h3 id="调度场算法"><a href="#调度场算法" class="headerlink" title="调度场算法"></a>调度场算法</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E8%B0%83%E5%BA%A6%E5%9C%BA%E7%AE%97%E6%B3%95">调度场算法 - 维基百科，自由的百科全书</a></p></blockquote><p>将中缀表达式转化为后缀表达式的算法。</p><p>为了方便快速计算，我们使用两个栈：运算符栈s1和操作数栈s2。操作数栈其实也可以看作中间结果栈。</p><p>在操作数压栈过程中，直接入栈即可。</p><p>在运算符压栈过程中，需要保持栈顶运算符为当前优先级最高的。换言之就是比当前栈内运算符优先级高的运算符已经完成了运算操作。</p><img src="https://img2020.cnblogs.com/blog/2368409/202112/2368409-20211208192029096-52314956.png" alt="img" style="zoom:67%;" /><h5 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h5><ol><li><p>初始化两个栈：</p><ul><li>运算符栈：s1</li><li>中间结果栈：s2</li></ul></li><li><p>从左到右扫描中缀表达式</p></li><li><p>遇到操作数时，将其压入s2</p></li><li><p>遇到运算符时</p><ul><li>比较它和s1栈顶运算符的优先级：<ul><li>如果s1为空或者栈顶运算符符号为（，则将其压入符号栈s1</li><li>如果优先级比栈顶运算符高，也将其压入符号栈s1</li><li>如果优先级比栈顶运算符低或相等，将s1栈顶的运算符弹出，并压入到s2中。</li></ul></li><li>再重复比较它和新栈顶运算符的优先级。</li></ul><blockquote><p>[!NOTE]</p><p>重复的含义：</p><ol><li><p>如果s1栈顶元素符号优先级比当前符号高或者等于，那么就将其弹出压入s2中（循环做，只要s1不为空）。</p><p>如果栈顶符号为 （ ，其优先级最低，就不会弹出，就跳出循环了。</p></li><li><p>跳出循环后，则将当前符号压入s1</p></li></ol></blockquote></li><li><p>遇到括号时：</p><ul><li>如果是左括号（ ：则直接压入s1</li><li>如果是右括号  ）：则以此弹出s1栈顶的运算符，并压入s2，知道遇到左括号为止，此时将这一对括号丢弃。</li></ul></li><li><p>重复步骤2~5，直到表达式最右端。</p></li><li><p>将s1中的运算符以此弹出并压入 s2。</p></li><li><p>以此弹出 s2 中的元素并输出，结果的 逆序 即为：中缀表达式转为后缀表达式。</p></li></ol><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1+((2+3)*4)-5</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">扫描到的元素</th><th align="center">s2(栈底-&gt;栈顶)</th><th align="center">s1(栈底-&gt;栈顶)</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">4</td><td align="center">空</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">+</td><td align="center">1</td><td align="center">+</td><td align="center">s1栈为空，压入s1</td></tr><tr><td align="center">（</td><td align="center">1</td><td align="center">+（</td><td align="center">左括号，压入s1</td></tr><tr><td align="center">（</td><td align="center">1</td><td align="center">+（（</td><td align="center">左括号，压入s1</td></tr><tr><td align="center">2</td><td align="center">1 2</td><td align="center">+（（</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">+</td><td align="center">1 2</td><td align="center">+（（+</td><td align="center">栈顶为（，压入s2</td></tr><tr><td align="center">3</td><td align="center">1 2 3</td><td align="center">+（（+</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">）</td><td align="center">1 2 3 +</td><td align="center">+（</td><td align="center">遇到右括号，弹出+后遇到左括号，删除一对小括号</td></tr><tr><td align="center">*</td><td align="center">1 2 3 +</td><td align="center">+（*</td><td align="center">遇到操作符，压入s1</td></tr><tr><td align="center">4</td><td align="center">1 2 3 + 4</td><td align="center">+（*</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">）</td><td align="center">1 2 3 + 4 *</td><td align="center">+</td><td align="center">遇到右括号，弹出*后遇到左括号，删除一对小括号</td></tr><tr><td align="center">-</td><td align="center">1 2 3 + 4 * +</td><td align="center">-</td><td align="center">遇到操作符，优先级相等，弹出+后s1为空，此时将-压入 s1</td></tr><tr><td align="center">5</td><td align="center">1 2 3 + 4 * + 5</td><td align="center">-</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">null</td><td align="center">1 2 3 + 4 * + 5 -</td><td align="center">空</td><td align="center">解析完毕，弹出s1中符号并压入s2中</td></tr></tbody></table><p>结果：1 2 3 + 4 * + 5</p><p>这是理论上转化后缀码的步骤。</p><p>优化后的程序为</p><table><thead><tr><th align="center">扫描到的元素</th><th align="center">s2(栈底-&gt;栈顶)</th><th align="center">s1（栈底-&gt;栈顶）</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">4</td><td align="center">空</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">1</td><td align="center">+</td><td align="center"></td></tr><tr><td align="center">（</td><td align="center">1</td><td align="center">+（（</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">1 2</td><td align="center">+（（</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">1 2</td><td align="center">+（（+</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">1 2 3</td><td align="center">+（（+</td><td align="center"></td></tr><tr><td align="center">）</td><td align="center">1 5</td><td align="center">+（</td><td align="center">将+压入s1，消除小括号，s2计算3 + 2</td></tr><tr><td align="center">*</td><td align="center">1 5</td><td align="center">+（*</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">1 5 4</td><td align="center">+（*</td><td align="center"></td></tr><tr><td align="center">）</td><td align="center">1 20</td><td align="center">+</td><td align="center">将*压入s1，消除小括号，是、s2计算 4 * 5</td></tr><tr><td align="center">-</td><td align="center">21</td><td align="center">-</td><td align="center">将+压入s2，计算20+1</td></tr><tr><td align="center">5</td><td align="center">21 5</td><td align="center">-</td><td align="center"></td></tr><tr><td align="center">null</td><td align="center">16</td><td align="center"></td><td align="center">将s1弹栈，压入s2</td></tr></tbody></table><p>结果为16</p><p>这个讲数据结构的笔记挺好的： <a href="https://zq99299.github.io/dsalg-tutorial/">数据结构与算法 系列教程（笔记）</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
