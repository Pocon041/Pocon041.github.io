<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#基础（1）</title>
      <link href="/2024/11/05/C-%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/11/05/C-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="信息系统开发（-NET）-第八章作业"><a href="#信息系统开发（-NET）-第八章作业" class="headerlink" title="信息系统开发（.NET）   第八章作业"></a>信息系统开发（.NET）   第八章作业</h1><h2 id="什么是类的继承？怎么定义派生类？"><a href="#什么是类的继承？怎么定义派生类？" class="headerlink" title="什么是类的继承？怎么定义派生类？"></a>什么是类的继承？怎么定义派生类？</h2><h2 id="简述创建派生类时，构造函数的调用。"><a href="#简述创建派生类时，构造函数的调用。" class="headerlink" title="简述创建派生类时，构造函数的调用。"></a>简述创建派生类时，构造函数的调用。</h2><h2 id="怎样定义基类虚方法，并在派生类中重写基类虚方法？"><a href="#怎样定义基类虚方法，并在派生类中重写基类虚方法？" class="headerlink" title="怎样定义基类虚方法，并在派生类中重写基类虚方法？"></a>怎样定义基类虚方法，并在派生类中重写基类虚方法？</h2><h2 id="抽象方法和虚方法有什么异同？"><a href="#抽象方法和虚方法有什么异同？" class="headerlink" title="抽象方法和虚方法有什么异同？"></a>抽象方法和虚方法有什么异同？</h2><h2 id="什么是抽象类？它有什么特点？它和接口有何异同？"><a href="#什么是抽象类？它有什么特点？它和接口有何异同？" class="headerlink" title="什么是抽象类？它有什么特点？它和接口有何异同？"></a>什么是抽象类？它有什么特点？它和接口有何异同？</h2><h2 id="简述通过委托来调用对象方法的基本过程。"><a href="#简述通过委托来调用对象方法的基本过程。" class="headerlink" title="简述通过委托来调用对象方法的基本过程。"></a>简述通过委托来调用对象方法的基本过程。</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算器原理</title>
      <link href="/2024/11/05/c-%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2024/11/05/c-%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="计算器原理"><a href="#计算器原理" class="headerlink" title="计算器原理"></a>计算器原理</h1><p>计算器计算的表达式是后缀表达式。</p><p>我们输入一个表达式，计算器给出结果主要经过了：将中缀表达式转化为后缀表达式，计算后缀表达式这两个过程</p><p>而转化和计算过程运用到了数据结构“栈”。</p><p>我们为了简化过程，在转化后缀表达式过程中进行中间结果的计算。</p><h3 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95">中缀表示法 - 维基百科，自由的百科全书</a></p></blockquote><p>中缀表达法是自然语言的写法，其操作符在操作数的中间</p><p>如3+4</p><h3 id="后缀表达式（逆波兰表示法）"><a href="#后缀表达式（逆波兰表示法）" class="headerlink" title="后缀表达式（逆波兰表示法）"></a>后缀表达式（逆波兰表示法）</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95">逆波兰表示法 - 维基百科，自由的百科全书</a></p></blockquote><p>即所有操作符在操作数的后面。</p><h5 id="求值过程"><a href="#求值过程" class="headerlink" title="求值过程"></a>求值过程</h5><ol><li>从左到右扫描表达式</li><li>遇到数字时，将数字压入堆栈</li><li>遇到运算符时<ul><li>弹出栈顶的两个数（栈顶和次顶），用运算符对它们做对应的计算，并将结果入栈</li><li>计算顺序是： 后弹出来的  （运算符）  先弹出来的</li></ul></li></ol><h3 id="调度场算法"><a href="#调度场算法" class="headerlink" title="调度场算法"></a>调度场算法</h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E8%B0%83%E5%BA%A6%E5%9C%BA%E7%AE%97%E6%B3%95">调度场算法 - 维基百科，自由的百科全书</a></p></blockquote><p>将中缀表达式转化为后缀表达式的算法。</p><p>为了方便快速计算，我们使用两个栈：运算符栈s1和操作数栈s2。操作数栈其实也可以看作中间结果栈。</p><p>在操作数压栈过程中，直接入栈即可。</p><p>在运算符压栈过程中，需要保持栈顶运算符为当前优先级最高的。换言之就是比当前栈内运算符优先级高的运算符已经完成了运算操作。</p><img src="https://img2020.cnblogs.com/blog/2368409/202112/2368409-20211208192029096-52314956.png" alt="img" style="zoom:67%;" /><h5 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h5><ol><li><p>初始化两个栈：</p><ul><li>运算符栈：s1</li><li>中间结果栈：s2</li></ul></li><li><p>从左到右扫描中缀表达式</p></li><li><p>遇到操作数时，将其压入s2</p></li><li><p>遇到运算符时</p><ul><li>比较它和s1栈顶运算符的优先级：<ul><li>如果s1为空或者栈顶运算符符号为（，则将其压入符号栈s1</li><li>如果优先级比栈顶运算符高，也将其压入符号栈s1</li><li>如果优先级比栈顶运算符低或相等，将s1栈顶的运算符弹出，并压入到s2中。</li></ul></li><li>再重复比较它和新栈顶运算符的优先级。</li></ul><blockquote><p>[!NOTE]</p><p>重复的含义：</p><ol><li><p>如果s1栈顶元素符号优先级比当前符号高或者等于，那么就将其弹出压入s2中（循环做，只要s1不为空）。</p><p>如果栈顶符号为 （ ，其优先级最低，就不会弹出，就跳出循环了。</p></li><li><p>跳出循环后，则将当前符号压入s1</p></li></ol></blockquote></li><li><p>遇到括号时：</p><ul><li>如果是左括号（ ：则直接压入s1</li><li>如果是右括号  ）：则以此弹出s1栈顶的运算符，并压入s2，知道遇到左括号为止，此时将这一对括号丢弃。</li></ul></li><li><p>重复步骤2~5，直到表达式最右端。</p></li><li><p>将s1中的运算符以此弹出并压入 s2。</p></li><li><p>以此弹出 s2 中的元素并输出，结果的 逆序 即为：中缀表达式转为后缀表达式。</p></li></ol><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1+((2+3)*4)-5</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">扫描到的元素</th><th align="center">s2(栈底-&gt;栈顶)</th><th align="center">s1(栈底-&gt;栈顶)</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">4</td><td align="center">空</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">+</td><td align="center">1</td><td align="center">+</td><td align="center">s1栈为空，压入s1</td></tr><tr><td align="center">（</td><td align="center">1</td><td align="center">+（</td><td align="center">左括号，压入s1</td></tr><tr><td align="center">（</td><td align="center">1</td><td align="center">+（（</td><td align="center">左括号，压入s1</td></tr><tr><td align="center">2</td><td align="center">1 2</td><td align="center">+（（</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">+</td><td align="center">1 2</td><td align="center">+（（+</td><td align="center">栈顶为（，压入s2</td></tr><tr><td align="center">3</td><td align="center">1 2 3</td><td align="center">+（（+</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">）</td><td align="center">1 2 3 +</td><td align="center">+（</td><td align="center">遇到右括号，弹出+后遇到左括号，删除一对小括号</td></tr><tr><td align="center">*</td><td align="center">1 2 3 +</td><td align="center">+（*</td><td align="center">遇到操作符，压入s1</td></tr><tr><td align="center">4</td><td align="center">1 2 3 + 4</td><td align="center">+（*</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">）</td><td align="center">1 2 3 + 4 *</td><td align="center">+</td><td align="center">遇到右括号，弹出*后遇到左括号，删除一对小括号</td></tr><tr><td align="center">-</td><td align="center">1 2 3 + 4 * +</td><td align="center">-</td><td align="center">遇到操作符，优先级相等，弹出+后s1为空，此时将-压入 s1</td></tr><tr><td align="center">5</td><td align="center">1 2 3 + 4 * + 5</td><td align="center">-</td><td align="center">遇到操作数，压入s2</td></tr><tr><td align="center">null</td><td align="center">1 2 3 + 4 * + 5 -</td><td align="center">空</td><td align="center">解析完毕，弹出s1中符号并压入s2中</td></tr></tbody></table><p>结果：1 2 3 + 4 * + 5</p><p>这是理论上转化后缀码的步骤。</p><p>优化后的程序为</p><table><thead><tr><th align="center">扫描到的元素</th><th align="center">s2(栈底-&gt;栈顶)</th><th align="center">s1（栈底-&gt;栈顶）</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">4</td><td align="center">空</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">1</td><td align="center">+</td><td align="center"></td></tr><tr><td align="center">（</td><td align="center">1</td><td align="center">+（（</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">1 2</td><td align="center">+（（</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">1 2</td><td align="center">+（（+</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">1 2 3</td><td align="center">+（（+</td><td align="center"></td></tr><tr><td align="center">）</td><td align="center">1 5</td><td align="center">+（</td><td align="center">将+压入s1，消除小括号，s2计算3 + 2</td></tr><tr><td align="center">*</td><td align="center">1 5</td><td align="center">+（*</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">1 5 4</td><td align="center">+（*</td><td align="center"></td></tr><tr><td align="center">）</td><td align="center">1 20</td><td align="center">+</td><td align="center">将*压入s1，消除小括号，是、s2计算 4 * 5</td></tr><tr><td align="center">-</td><td align="center">21</td><td align="center">-</td><td align="center">将+压入s2，计算20+1</td></tr><tr><td align="center">5</td><td align="center">21 5</td><td align="center">-</td><td align="center"></td></tr><tr><td align="center">null</td><td align="center">16</td><td align="center"></td><td align="center">将s1弹栈，压入s2</td></tr></tbody></table><p>结果为16</p><p>这个讲数据结构的笔记挺好的： <a href="https://zq99299.github.io/dsalg-tutorial/">数据结构与算法 系列教程（笔记）</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
